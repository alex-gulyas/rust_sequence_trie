var searchIndex = {};
searchIndex['sequence_trie'] = {"items":[[0,"","sequence_trie","Sequence Trie - a trie-like data-structure for storing sequences of values.",null,null],[3,"SequenceTrie","","A `SequenceTrie` is recursively defined as a value and a map containing child Tries.",null,null],[12,"value","","Node value.",0,null],[12,"children","","Node children as a hashmap keyed by key fragments.",0,null],[3,"Keys","","An iteterator over the keys of a `SequenceTrie`.",null,null],[11,"new","","Create a new SequenceTrie node with no value and an empty child map.",0,{"inputs":[{"name":"sequencetrie"}],"output":{"name":"sequencetrie"}}],[11,"insert","","Insert a key and value into the SequenceTrie.",0,null],[11,"get","","Find a reference to a key's value, if it has one.",0,null],[11,"get_node","","Find a reference to a key's node, if it has one.",0,null],[11,"get_mut","","Find a mutable reference to a key's value, if it has one.",0,null],[11,"get_mut_node","","Find a mutable reference to a key's node, if it has one.",0,null],[11,"get_prefix_nodes","","Find the longest prefix of nodes which match the given key.",0,null],[11,"get_ancestor","","Find the value of the nearest ancestor with a non-empty value, if one exists.",0,null],[11,"get_ancestor_node","","Find the nearest ancestor with a non-empty value, if one exists.",0,null],[11,"remove","","Remove the node corresponding to the given key.",0,null],[11,"keys","","Return an iterator over all the keys in the collection.",0,{"inputs":[{"name":"sequencetrie"}],"output":{"name":"keys"}}],[6,"Item","","",null,null],[11,"next","","",1,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"sequencetrie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sequencetrie"}],"output":{"name":"sequencetrie"}}],[11,"eq","","",0,{"inputs":[{"name":"sequencetrie"},{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[{"name":"sequencetrie"}],"output":{"name":"self"}}]],"paths":[[3,"SequenceTrie"],[3,"Keys"]]};
initSearch(searchIndex);
